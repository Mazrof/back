generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdminGroupFilters {
  adminId Int    @map("admin_id")
  groupId Int    @unique @map("group_id")
  admins  Admins @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  groups  Groups @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([adminId, groupId])
  @@map("admingroupfilters")
}

model Admins {
  id                Int                 @id @default(autoincrement())
  email             String              @unique @db.VarChar(255)
  password          String
  passwordChangedAt DateTime?           @map("password_changed_at") @db.Timestamp(6)
  adminGroupFilters AdminGroupFilters[]
  bannedUsers       BannedUsers[]

  @@map("admins")
}

model BannedUsers {
  adminId Int    @map("admin_id")
  userId  Int    @map("user_id")
  admins  Admins @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users   Users  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([adminId, userId])
  @@map("bannedusers")
}

model CallReceivers {
  id             Int           @id @default(autoincrement())
  groupId        Int?          @map("group_id")
  personalChatId Int?          @map("personal_chat_id")
  groups         Groups?       @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  personalChat   PersonalChat? @relation(fields: [personalChatId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  voiceCalls     VoiceCalls[]

  @@map("callreceivers")
}

model Channels {
  id                   Int                    @id @default(autoincrement())
  communityId          Int                    @unique @map("community_id")
  canAddComments       Boolean                @default(false) @map("can_add_comments")
  invitationLink       String                 @unique
  community            Communities            @relation(fields: [communityId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  channelSubscriptions ChannelSubscriptions[]

  @@map("channels")
}

model ChannelSubscriptions {
  userId                 Int           @map("user_id")
  channelId              Int           @map("channel_id")
  hasDownloadPermissions Boolean       @default(false) @map("has_download_permissions")
  active                 Boolean       @default(true)
  role                   CommunityRole @default(member) @map("community_role")
  channels               Channels      @relation(fields: [channelId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users                  Users         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([userId, channelId])
  @@map("channelsubscriptions")
}

model Communities {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(255)
  privacy      Boolean       @default(true)
  creatorId    Int           @map("creator_id")
  active       Boolean       @default(true)
  channels     Channels?
  users        Users         @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  groups       Groups?
  participants Participants?

  @@map("communities")
}

model GroupMemberships {
  userId                 Int           @map("user_id")
  groupId                Int           @map("group_id")
  hasDownloadPermissions Boolean       @default(false) @map("has_download_permissions")
  hasMessagePermissions  Boolean       @default(false) @map("has_message_permissions")
  addToGroupPermission   Boolean       @default(false) @map("add_to_group_permission")
  active                 Boolean       @default(true)
  role                   CommunityRole @default(member) @map("community_role")
  groups                 Groups        @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users                  Users         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([userId, groupId])
  @@map("groupmemberships")
}

model Groups {
  id                Int                @id @default(autoincrement())
  communityId       Int                @unique @map("community_id")
  groupSize         Int                @map("group_size")
  invitationLink    String             @unique
  adminGroupFilters AdminGroupFilters?
  callReceivers     CallReceivers[]
  groupMemberships  GroupMemberships[]
  community         Communities        @relation(fields: [communityId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("groups")
}

model Media {
  id         Int          @id @default(autoincrement())
  mediaType  String?      @map("media_type") @db.VarChar(50)
  mediaUrl   String?      @map("media_url")
  storyMedia StoryMedia[]

  @@map("media")
}

model MessageMentions {
  userId    Int      @map("user_id")
  messageId Int      @map("message_id")
  messages  Messages @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users     Users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([userId, messageId])
  @@map("messagementions")
}

model MessageReadReceipts {
  userId        Int           @map("user_id")
  messageId     Int           @map("message_id")
  deliveredAt   DateTime?     @map("delivered_at") @db.Timestamp(6)
  readAt        DateTime?     @map("read_at") @db.Timestamp(6)
  participantId Int?          @map("participant_id")
  messages      Messages      @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  participants  Participants? @relation(fields: [participantId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         Users         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([userId, messageId])
  @@map("messagereadreceipts")
}

model Messages {
  id                  Int                   @id @default(autoincrement())
  createdAt           DateTime?             @default(now()) @map("created_at") @db.Timestamp(6)
  isAnnouncement      Boolean?              @default(false) @map("is_announcement")
  isForward           Boolean?              @default(false) @map("is_forward")
  updatedAt           DateTime?             @default(now()) @map("updated_at") @db.Timestamp(6)
  content             String?
  url                 String?
  senderId            Int                   @map("sender_id")
  replyTo             Int?                  @map("reply_to")
  participantId       Int                   @map("participant_id")
  durationInMinutes   Int?                  @map("duration_in_minutes")
  status              MessageStatus         @default(usual)
  messageMentions     MessageMentions[]
  messageReadReceipts MessageReadReceipts[]
  participants        Participants          @relation(fields: [participantId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  messages            Messages?             @relation("MessagesToMessages", fields: [replyTo], references: [id], onDelete: Cascade, onUpdate: NoAction)
  otherMessages       Messages[]            @relation("MessagesToMessages")
  users               Users                 @relation(fields: [senderId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([participantId])
  @@map("messages")
}

model MutedParticipants {
  userId        Int                      @map("user_id")
  participantId Int                      @map("participant_id")
  duration      Unsupported("interval")?
  participants  Participants             @relation(fields: [participantId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         Users                    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([userId, participantId])
  @@map("mutedparticipants")
}

model Participants {
  id                  Int                   @id @default(autoincrement())
  communityId         Int?                  @unique @map("community_id")
  personalChatId      Int?                  @unique @map("personal_chat_id")
  type                ParticipiantTypes     @default(personalChat)
  messageReadReceipts MessageReadReceipts[]
  messages            Messages[]
  mutedParticipants   MutedParticipants[]
  communities         Communities?          @relation(fields: [communityId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  personalChat        PersonalChat?         @relation(fields: [personalChatId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("participants")
}

model PersonalChat {
  id            Int             @id @default(autoincrement())
  user1Id       Int             @map("user1id")
  user2Id       Int             @map("user2id")
  callReceivers CallReceivers[]
  participants  Participants?
  users1        Users           @relation("PersonalChat_User1IdToUsers", fields: [user1Id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users2        Users           @relation("PersonalChat_User2IdToUsers", fields: [user2Id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user1Id, user2Id])
  @@map("personalchat")
}

model Stories {
  id         Int          @id @default(autoincrement())
  userId     Int?         @map("user_id")
  content    String?
  status     Boolean?     @default(true)
  expiryDate DateTime?    @map("expiry_date") @db.Timestamp(6)
  createdAt  DateTime?    @default(now()) @map("created_at") @db.Timestamp(6)
  users      Users?       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  storyViews StoryViews[]
  storyMedia StoryMedia[]

  @@map("stories")
}

model StoryViews {
  userId  Int     @map("user_id")
  storyId Int     @map("story_id")
  stories Stories @relation(fields: [storyId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users   Users   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([userId, storyId])
  @@map("story_views")
}

model StoryMedia {
  storyId Int     @map("story_id")
  mediaId Int     @map("media_id")
  media   Media   @relation(fields: [mediaId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  stories Stories @relation(fields: [storyId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([storyId, mediaId])
  @@map("storymedia")
}

model UserBlacklist {
  blockerId   Int   @map("blocker_id")
  blockedId   Int   @map("blocked_id")
  blockedUser Users @relation("UserBlacklist_BlockedIdToUsers", fields: [blockedId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  blockerUser Users @relation("UserBlacklist_BlockerIdToUsers", fields: [blockerId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([blockerId, blockedId])
  @@map("user_blacklist")
}

model Users {
  id                    Int                    @id @default(autoincrement())
  username              String                 @unique @db.VarChar(255)
  password              String
  passwordChangedAt     DateTime?              @map("password_changed_at") @db.Timestamp(6)
  email                 String                 @unique @db.VarChar(255)
  phone                 String?                @db.VarChar(20)
  photo                 String?
  bio                   String?
  screenName            String?                @map("screen_name") @db.VarChar(255)
  status                Boolean?               @default(true)
  lastSeen              DateTime?              @map("last_seen") @db.Timestamp(6)
  activeNow             Boolean?               @default(false) @map("active_now")
  providerType          Social?                @map("provider_type")
  providerId            String?                @map("provider_id")
  autoDownloadSizeLimit Int?                   @map("auto_download_size_limit")
  maxLimitFileSize      Int?                   @map("max_limit_file_size")
  profilePicVisibility  Privacy?               @default(everyone) @map("profile_pic_visibility")
  storyVisibility       Privacy?               @default(everyone) @map("story_visibility")
  readReceiptsEnabled   Privacy?               @default(everyone) @map("read_receipts_enabled")
  lastSeenVisibility    Boolean?               @default(true) @map("last_seen_visibility")
  groupAddPermission    Boolean?               @default(true) @map("group_add_permission")
  is_email_verified     Boolean?               @default(false)
  is_phone_verified     Boolean?               @default(false)
  private_key           String?
  public_key            String
  bannedUsers           BannedUsers[]
  channelSubscriptions  ChannelSubscriptions[]
  communities           Communities[]
  groupMemberships      GroupMemberships[]
  messageMentions       MessageMentions[]
  messageReadReceipts   MessageReadReceipts[]
  messages              Messages[]
  mutedParticipants     MutedParticipants[]
  personalChatsAsUser1  PersonalChat[]         @relation("PersonalChat_User1IdToUsers")
  personalChatsAsUser2  PersonalChat[]         @relation("PersonalChat_User2IdToUsers")
  stories               Stories[]
  storyViews            StoryViews[]
  blockedByUsers        UserBlacklist[]        @relation("UserBlacklist_BlockedIdToUsers")
  blockerUsers          UserBlacklist[]        @relation("UserBlacklist_BlockerIdToUsers")
  voiceCalls            VoiceCalls[]

  @@map("users")
}

model VoiceCalls {
  id                   Int            @id @default(autoincrement())
  startAt              DateTime?      @map("start_at") @db.Timestamp(6)
  endAt                DateTime?      @map("end_at") @db.Timestamp(6)
  numberOfParticipants Int?           @map("number_of_participants")
  status               Boolean?       @default(true)
  creatorId            Int?           @map("creator_id")
  callReceiverId       Int?           @map("callreceiver_id")
  callReceivers        CallReceivers? @relation(fields: [callReceiverId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users                Users?         @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("voice_calls")
}

enum Privacy {
  everyone
  contacts
  nobody

  @@map("privacy")
}

enum Social {
  github
  facebook
  google

  @@map("social")
}

enum MessageStatus {
  usual
  pinned
  drafted
}

enum ParticipiantTypes {
  personalChat
  community
}

enum CommunityRole {
  admin
  member

  @@map("community_role")
}
